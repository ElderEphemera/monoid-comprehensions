{-# LANGUAGE CPP #-}
{-# LANGUAGE OverloadedStrings #-}

module MonoidComprehensions (plugin) where

import qualified Data.Generics as G

#if __GLASGOW_HASKELL__ < 900
import qualified SrcLoc as L
import qualified GhcPlugins as P
#else
import qualified GHC.Types.SrcLoc as L
import qualified GHC.Plugins as P
#endif

#if __GLASGOW_HASKELL__ < 810
import qualified HsSyn as S
#else
import qualified GHC.Hs.Expr as S
import qualified GHC.Hs.Extension as S
#endif

--------------------------------------------------------------------------------
-- Main definitions
--------------------------------------------------------------------------------

plugin :: P.Plugin
plugin = P.defaultPlugin
  { P.parsedResultAction = \_opts _summary -> pure . desugarMod
  , P.pluginRecompile = P.purePlugin }

desugarMod :: P.HsParsedModule -> P.HsParsedModule
desugarMod hpm =
  hpm { P.hpm_module = G.everywhere (G.mkT desugarExpr) $ P.hpm_module hpm }

desugarExpr :: S.LHsExpr S.GhcPs -> S.LHsExpr S.GhcPs
desugarExpr (L.L ps (S.HsPar px (L.L cs (S.HsDo dx ctx (L.L ss stmts)))))
  | isComprehensionContext ctx, ps `wraps` cs =
    L.L ps . S.HsPar px . foldExpr . L.L cs . S.HsDo dx ctx
    . L.L ss $ desugarStmt <$> stmts
desugarExpr expr = expr

desugarStmt :: S.ExprLStmt S.GhcPs -> S.ExprLStmt S.GhcPs
#if __GLASGOW_HASKELL__ < 900
desugarStmt (L.L ss (S.BindStmt sx pat body bind' fail')) =
  L.L ss $ S.BindStmt sx pat (toListExpr body) bind' fail'
#else
desugarStmt (L.L ss (S.BindStmt sx pat body)) =
  L.L ss $ S.BindStmt sx pat (toListExpr body)
#endif
desugarStmt (L.L ss (S.ParStmt sx blocks mzip' bind')) =
  L.L ss $ S.ParStmt sx (desugarPar <$> blocks) mzip' bind'
desugarStmt stmt = stmt

desugarPar :: S.ParStmtBlock S.GhcPs S.GhcPs -> S.ParStmtBlock S.GhcPs S.GhcPs
desugarPar (S.ParStmtBlock px lstmts vars return') =
  S.ParStmtBlock px (desugarStmt <$> lstmts) vars return'
#if __GLASGOW_HASKELL__ < 900
desugarPar (S.XParStmtBlock px) = S.XParStmtBlock px
#endif

--------------------------------------------------------------------------------
-- Expression helpers
--------------------------------------------------------------------------------

foldExpr :: S.LHsExpr S.GhcPs -> S.LHsExpr S.GhcPs
foldExpr = mkFunExpr "Data.Foldable" "fold"

toListExpr :: S.LHsExpr S.GhcPs -> S.LHsExpr S.GhcPs
toListExpr = mkFunExpr "Data.Foldable" "toList"

mkFunExpr :: String -> String -> S.LHsExpr S.GhcPs -> S.LHsExpr S.GhcPs
mkFunExpr modName funName =
  loc . app (loc . var $ loc fun) . loc . S.HsPar noExtField
  where fun = P.mkRdrQual (P.mkModuleName modName) (P.mkVarOcc funName)
        loc = L.L $ P.mkGeneralSrcSpan "<generated by monoid-comprehensions>"
        app = S.HsApp noExtField
        var = S.HsVar noExtField

--------------------------------------------------------------------------------
-- `SrcSpan` helpers
--------------------------------------------------------------------------------

-- TODO: Pattern synonym?
wraps :: L.SrcSpan -> L.SrcSpan -> Bool
wraps ss1 ss2 =
     L.srcSpanStart ss1 `nextTo` L.srcSpanStart ss2
  && L.srcSpanEnd   ss2 `nextTo` L.srcSpanEnd   ss1

nextTo :: L.SrcLoc -> L.SrcLoc -> Bool
nextTo sl1 sl2 | Just rsl1 <- getRealSrcLoc sl1, Just rsl2 <- getRealSrcLoc sl2
  =  L.srcLocLine rsl1     == L.srcLocLine rsl2
  && L.srcLocCol  rsl1 + 1 == L.srcLocCol  rsl2
nextTo _ _ = False

--------------------------------------------------------------------------------
-- Compatability helpers
--------------------------------------------------------------------------------

isComprehensionContext :: S.HsStmtContext id -> Bool
#if __GLASGOW_HASKELL__ < 808
isComprehensionContext = S.isListCompExpr
#else
isComprehensionContext = S.isComprehensionContext
#endif

#if __GLASGOW_HASKELL__ < 810
noExtField :: S.NoExt
noExtField = S.noExt
#else
noExtField :: S.NoExtField
noExtField = S.noExtField
#endif

getRealSrcLoc :: L.SrcLoc -> Maybe L.RealSrcLoc
#if __GLASGOW_HASKELL__ < 900
getRealSrcLoc (L.RealSrcLoc rsl) = Just rsl
#else
getRealSrcLoc (L.RealSrcLoc rsl _) = Just rsl
#endif
getRealSrcLoc _ = Nothing
